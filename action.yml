name: Asset Build
description: This is a GitHub Action designed to automate the building of supported asset types on Nullplatform
inputs:
  command:
    description: The command to be executed for building the assets
    required: false
    default: make
  arguments:
    description: Additional arguments to be passed along with the build command
    required: false
    default: build
  options:
    description: Additional options or flags to be used during the build process
    required: false
    default: ''
  checkout-repository:
    description: Checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
    required: false
    default: true
  build-working-directory:
    description: The directory where the build process will take place
    required: false
    default: .
  asset-working-directory:
    description: The directory containing source code and assets for the build process
    required: false
    default: .
  asset-output-directory:
    description: The directory where built assets will be output
    required: false
    default: build
  name:
    description: The name of the asset or project being built
    required: false
    default: main
  type:
    description: The type of asset to be build. One of docker-image, lambda, etc.
    required: false
    default: ''
runs:
  using: composite
  steps:
    - name: Sanitize Paths
      id: sanitize-paths
      shell: bash
      run: |
        # Sanitize function
        sanitize_path() {
          local path="$1"
          # Remove "./" from the beginning of the path, but preserve "."
          if [ "$path" != "./" ]; then
            path="${path#./}"
          fi
          # Remove trailing slashes
          path="${path%/}"
          echo "$path"
        }
        # Sanitize paths
        build_working_directory=$(sanitize_path "${{ inputs.build-working-directory }}")
        asset_working_directory=$(sanitize_path "${{ inputs.asset-working-directory }}")
        asset_output_directory=$(sanitize_path "${{ inputs.asset-output-directory }}")
        # Export sanitized paths
        echo "build-working-directory=$build_working_directory" >> "$GITHUB_OUTPUT"
        echo "asset-working-directory=$asset_working_directory" >> "$GITHUB_OUTPUT"
        echo "asset-output-directory=$asset_output_directory" >> "$GITHUB_OUTPUT"
    - if: ${{ !inputs.checkout-repository || inputs.checkout-repository == 'true' }}
      name: Checkout code
      id: checkout-code
      uses: actions/checkout@v4
    - name: Build asset
      id: build-asset
      shell: bash
      env:
        BUILD_WORKING_DIRECTORY: ${{ steps.sanitize-paths.outputs.build-working-directory }}
        ASSET_WORKING_DIRECTORY: ${{ steps.sanitize-paths.outputs.asset-working-directory }}
        ASSET_OUTPUT_DIRECTORY: ${{ steps.sanitize-paths.outputs.asset-working-directory }}/${{ steps.sanitize-paths.outputs.asset-output-directory }}
        ASSET_NAME: ${{ inputs.name }}
        ASSET_TYPE: ${{ inputs.type }}
        ASSET_TARGET_URL: ''
      run: |
        if [ "${{ inputs.command }}" != "make" ]; then
          ${{ inputs.command }} \
          ${{ inputs.arguments }} \
          ${{ inputs.options }}
        else
          make_file_path="${{ steps.sanitize-paths.outputs.build-working-directory }}"
          make_file_task="build"
          if [ ! -f "$make_file_path/makefile" ] && [ ! -f "$make_file_path/Makefile" ]; then
            echo "Makefile not found in the '${{ steps.sanitize-paths.outputs.build-working-directory }}' folder. Using defaults."
            make_file_path="${{ github.action_path }}"
            if [ "${{ inputs.type }}" != "" ]; then
              make_file_task="build-${{ inputs.type }}"
            elif ls ${{ steps.sanitize-paths.outputs.asset-working-directory }}/Dockerfile* 1> /dev/null 2>&1; then
              make_file_task="build-docker-image"
            else
              make_file_task="build-lambda"
            fi
            # Override directories to work with default Makefile
            BUILD_WORKING_DIRECTORY=$(realpath "$BUILD_WORKING_DIRECTORY")
            ASSET_WORKING_DIRECTORY=$(realpath "$ASSET_WORKING_DIRECTORY")
            ASSET_OUTPUT_DIRECTORY=$(realpath "$ASSET_OUTPUT_DIRECTORY")
          fi
        
          build_command="make -C $make_file_path"
        
          if [ "${{ inputs.arguments }}" != "build" ]; then
            build_command="$build_command ${{ inputs.arguments }}"
          else
            build_command="$build_command $make_file_task"
          fi
        
          if [ -n "${{ inputs.options }}" ]; then
            build_command="$build_command ${{ inputs.options }}"
          fi
        
          eval $build_command \
          BUILD_WORKING_DIRECTORY=$BUILD_WORKING_DIRECTORY \
          ASSET_WORKING_DIRECTORY=$ASSET_WORKING_DIRECTORY \
          ASSET_OUTPUT_DIRECTORY=$ASSET_OUTPUT_DIRECTORY \
          ASSET_NAME=$ASSET_NAME \
          ASSET_TYPE=$ASSET_TYPE \
          ASSET_TARGET_URL=''
        fi
